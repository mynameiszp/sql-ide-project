// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace SQL.Data.Migrations
{
    [DbContext(typeof(SqlDataContext))]
    [Migration("20231224171106_InitialMigration2")]
    partial class InitialMigration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SQL.Data.ColumnEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<long?>("TableEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TableEntityId");

                    b.ToTable("ColumnEntities");
                });

            modelBuilder.Entity("SQL.Data.Data", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ColumnId")
                        .HasColumnType("bigint")
                        .HasColumnName("Column_id");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long>("RowId")
                        .HasColumnType("bigint")
                        .HasColumnName("Row_id");

                    b.HasKey("Id");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("SQL.Data.DatabaseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DBType")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<DateOnly>("DateOfCreation")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.HasKey("Id");

                    b.ToTable("DatabaseEntities");
                });

            modelBuilder.Entity("SQL.Data.KeyWord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("KeyWords");
                });

            modelBuilder.Entity("SQL.Data.SchemeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("DatabaseEntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseEntityId");

                    b.ToTable("SchemeEntities");
                });

            modelBuilder.Entity("SQL.Data.TableEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<long?>("SchemeEntityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SchemeEntityId");

                    b.ToTable("TableEntities");
                });

            modelBuilder.Entity("SQL.Data.UserPreference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PreferenceValue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("UserPreferences");
                });

            modelBuilder.Entity("SQL.Data.ColumnEntity", b =>
                {
                    b.HasOne("SQL.Data.TableEntity", null)
                        .WithMany("Columns")
                        .HasForeignKey("TableEntityId");
                });

            modelBuilder.Entity("SQL.Data.SchemeEntity", b =>
                {
                    b.HasOne("SQL.Data.DatabaseEntity", null)
                        .WithMany("Schemes")
                        .HasForeignKey("DatabaseEntityId");
                });

            modelBuilder.Entity("SQL.Data.TableEntity", b =>
                {
                    b.HasOne("SQL.Data.SchemeEntity", null)
                        .WithMany("Tables")
                        .HasForeignKey("SchemeEntityId");
                });

            modelBuilder.Entity("SQL.Data.DatabaseEntity", b =>
                {
                    b.Navigation("Schemes");
                });

            modelBuilder.Entity("SQL.Data.SchemeEntity", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("SQL.Data.TableEntity", b =>
                {
                    b.Navigation("Columns");
                });
#pragma warning restore 612, 618
        }
    }
}
